Binary Exercises1. Without using a calculator:64 in base 10 -> base 2 (example)	100 base 10 = 1000000 base 2100 in base 10 -> base 264 32 16 08 04 02 011    1    0   0    1    0   0   = 64+32+04=100100 in base 10 -> base 5250  125  25  05  010        0      4     0    0   =  25*4=251111111 in base 2 -> base 10	64 32 16 08 04 02 011     1    1   1    1    1   1  = 1272. Describe the algorithm for adding two binary numbersExample:    1001    9  +0011   +3   -----   --   01100   12Adding down from right to left, 1+1= 10 place the 0 in the first spot and carry the 1 since we can only put either a 1 or 0. The carried 1 add to the 0 and 1 in the next column which equals 10- place the 0 and carry the 1 to the next column to the left.  1 + 0+0=1- nothing to carry so add the 1 + 0 to equal 1100.Here’s how I visualized it:64 32 16 08 04 02 01 0     0   0    1  0     0   1  =90     0    0   0  0     1   1 = 39+3=123. Describe the algorithm for multiplying two binary numbersExample:     1001    9   x0011   x3   -----   --   11011   27    1001x  0011______________           1001        10010 00000000000000000_______________11011Visualized: 16+8+2+1=274. Is there a trick for multiplying numbers by 2? Dividing numbers by 2?Convert them into a 5 or 10-bit integer5. Write the truth tables for AND, OR, and NOT(example) AND:    ^ | a b    -------    1 | 1 1    0 | 1 0    0 | 0 1    0 | 0 0AND:    && | a b			    -------    0 | 0 0 =false    0 | 0 1=false    0 | 1 0=false    1 | 1 1=true       OR:    || | a b    -------    0| 0 0 =false    1 | 0 1=true    0 | 1 0=true    1 | 1 1=trueNOT:   !   | a b    -------    1 | 0    0 | 1     EXTRA CREDIT 1: Using just the operators described above, build a "half adder".A "half adder" takes in two inputs, A and B, and produces as outputthe "sum" of A and B, and a "carry" if one exists.Here is the truth table for the "half adder". + is the sum, and "C"is the carry.    + C | A B    ---------    0 0 | 0 0    1 0 | 0 1    1 0 | 1 0    1 1 | 1 1EXTRA CREDIT 2: Using just the operators described above, build a "full adder".A "full adder" takes in three inputs: A, B, and Cin (the carry in), and produces twooutputs: the sum (S) and a carry out (Cout)Here is the truth table for the "full adder".A  B  Cin  | Cout S------------------0  0  0    |  0  00  0  1    |  0  10  1  0    |  0  10  1  1    |  1  01  0  0    |  0  11  0  1    |  1  01  1  0    |  1  01  1  1    |  1  1